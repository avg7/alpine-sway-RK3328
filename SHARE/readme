If the source (www.avg7.de/forum/sicheres-alpine-linux-betriebs-system-usb-stick-speicherkarte) is named, the following content may be reproduced, redistributed and used commercially in any form and also modified, free of charge. This applies irrevocably and always.

What has already been done:
DIY Fully working Alpine Linux for Rockchip and other ARM SOCs
Why we chose a rock64 board: Open Source & immune to Spectre and Meltdown.
(the following instructions also work for the ROC-RK3328-CC (Renegade) and if you modify them also for other boards)

You need one rock64 or ROC-RK3328-CC (Renegade) board and two microSD cards with the same operatingsystem (Debian: https://www.armbian.com/rock64/). With the one operatingsystem you download the software packages wit the other you compile the kernel. For the operatingsystem Alpine Linux you should have a third emty microSD card. Don‘t forget to buy a powercable (https://store.pine64.org/?product=1-meter-length-usb-to-type-h-barrel-power-cable).
 
Optional you can buy a CH340g usb to serial ttl bridge adapter (https://store.pine64.org/?product=padi-serial-console)), a Open Source Hardware True Random Number Generator (for example the ChaosKey (https://altusmetrum.org/ChaosKey/)) and a Open Source Hardware Password Keeper (for example the Mooltipass (https://www.themooltipass.com/)).

For higher security requirements: The spi flash memory on the rock64 board should be desoldered. (Important: After that you must disable the spi flash memory by ground the SPI Clock (SPI_CLK_M2) GPIO pin 23 on the rock64 (connect Pin 23 to Pin 25))
 
Important: You can compile the current stable kernel from https://www.kernel.org/ on Debian (Armbian) without problems on a computer with an ARM processor (for example rock64 or ROC-RK3328-CC (Renegade) board).
 
Contact us if you have any questions.

Preparation for offline compiling
Download for example the operatingsystem Armbian (Debian) from https://www.armbian.com/rock64/. Check download integrity and authenticity (https://docs.armbian.com/User-Guide_Getting-Started/) and install the operatingsystem on the two microSD cards.

If you want do optional section 1, then in "/etc/apt/sources.list" must be the same mirror as in optional section 1 (for example "http://ftp.debian.org/debian/"), then download requiered packages for compiling:
sudo apt-get update

For Debian (if you use latest Debian for server): 
sudo apt-get --no-install-suggests --no-install-recommends install --reinstall --download-only build-essential dpkg-dev fakeroot gcc libncurses-dev libssl-dev make squashfs-tools unzip zip lzop bc 
Otherwise use the following command:
sudo apt-get --no-install-suggests --no-install-recommends install --reinstall --download-only bison g++-arm-linux-gnueabi gcc-arm-linux-gnueabi zlib1g-dev fakeroot wget libusb-1.0-0 libusb-dev cpp-arm-linux-gnueabihf g++-arm-linux-gnueabihf gcc-8-arm-linux-gnueabihf-base flex binutils-arm-linux-gnueabihf u-boot-tools swig make bc gcc gcc-arm-linux-gnueabihf build-essential curl device-tree-compiler dosfstools flex python-dev gdisk git gnupg gperf libc6-dev libncurses-dev gcc libpython-dev libssl-dev libssl1.1 libelf-dev lzop mtools parted repo swig tar zip devscripts libncurses5 squashfs-tools unzip 

Packages for gcc-plugins (replace "X" with current version number)
sudo apt-get --no-install-suggests --no-install-recommends install --reinstall --download-only gcc-X-plugin-dev
 
Optional information:
Almost all packages for compile a linux kernel with Armbian (Debian):
sudo apt-get install --download-only binutils binutils-aarch64-linux-gnu binutils-arm-linux-gnueabi binutils-arm-linux-gnueabihf binutils-common bison build-essential cpp cpp-8 cpp-8-arm-linux-gnueabi cpp-8-arm-linux-gnueabihf cpp-arm-linux-gnueabi cpp-arm-linux-gnueabihf curl devscripts dh-python dirmngr dosfstools dpkg-dev fakeroot file flex g++ g++-8 g++-8-arm-linux-gnueabi g++-8-arm-linux-gnueabihf g++-arm-linux-gnueabi g++-arm-linux-gnueabihf gcc gcc-8 gcc-8-arm-linux-gnueabi gcc-8-arm-linux-gnueabi-base gcc-8-arm-linux-gnueabihf gcc-8-arm-linux-gnueabihf-base gcc-8-cross-base gcc-8-plugin-dev gcc-arm-linux-gnueabi gcc-arm-linux-gnueabihf gdisk genisoimage git git-man gnupg gnupg-l10n gnupg-utils gperf gpg gpg-agent gpgconf gpgsm gpgv gpg-wks-client gpg-wks-server haveged libasan5 libasan5-armel-cross libasan5-armhf-cross libatomic1 libatomic1-armel-cross libatomic1-armhf-cross libb-hooks-op-check-perl libbinutils libbison-dev libc6-armel-cross libc6-armhf-cross libc6-dev libc6-dev-armel-cross libc6-dev-armhf-cross libcc1-0 libc-dev-bin libclass-method-modifiers-perl libcurl4 libdevel-callchecker-perl libdevel-globaldestruction-perl libdpkg-perl libdynaloader-functions-perl libelf-dev libencode-locale-perl liberror-perl libexpat1 libexpat1-dev libfakeroot libfile-homedir-perl libfile-listing-perl libfile-which-perl libgcc1-armel-cross libgcc1-armhf-cross libgcc-8-dev libgcc-8-dev-armel-cross libgcc-8-dev-armhf-cross libgdbm6 libgdbm-compat4 libgmp-dev libgmpxx4ldbl libgomp1 libgomp1-armel-cross libgomp1-armhf-cross libhavege1 libhtml-parser-perl libhtml-tagset-perl libhtml-tree-perl libhttp-cookies-perl libhttp-date-perl libhttp-message-perl libhttp-negotiate-perl libimport-into-perl libio-html-perl libio-pty-perl libio-socket-ssl-perl libipc-run-perl libisl19 libitm1 liblsan0 liblwp-mediatypes-perl liblwp-protocol-https-perl liblzo2-2 liblzo2-2 libmagic1 libmagic-mgc libmodule-runtime-perl libmoo-perl libmpc3 libmpc-dev libmpdec2 libmpdec2 libmpfr6 libmpfr-dev libncurses5 libncurses5-dev libncurses6 libncurses-dev libncursesw6 libncursesw6 libnet-http-perl libnet-ssleay-perl libparams-classify-perl libperl5.28 libpython2.7 libpython2.7-dev libpython2.7-minimal libpython2.7-stdlib libpython2-dev libpython2-stdlib libpython3.7 libpython3.7-dev libpython3.7-minimal libpython3.7-minimal libpython3.7-stdlib libpython3.7-stdlib libpython3-all-dev libpython3-dev libpython3-stdlib libpython3-stdlib libpython-dev libpython-stdlib librole-tiny-perl libsigsegv2 libssl1.1 libssl-dev libstdc++6-armel-cross libstdc++6-armhf-cross libstdc++-8-dev libstdc++-8-dev-armel-cross libstdc++-8-dev-armhf-cross libstrictures-perl libsub-exporter-progressive-perl libsub-quote-perl libtimedate-perl libtinfo5 libtinfo6 libtinfo6 libtinfo-dev libtry-tiny-perl libtsan0 libubsan1 libubsan1-armel-cross libubsan1-armhf-cross liburi-perl libusb-1.0-0-dev libwww-perl libwww-robotrules-perl linux-libc-dev linux-libc-dev-armel-cross linux-libc-dev-armhf-cross lzop m4 make mime-support mtools patch patchutils perl perl-modules-5.28 perl-openssl-defaults python2 python python2.7 python2.7-dev python2.7-minimal python2-dev python2-minimal python3 python3.7 python3.7-dev python3.7-minimal python3-dev python3-distutils python3-lib2to3 python3-minimal python-dev python-kerberos python-minimal repo squashfs-tools swig swig3.0 wdiff zip zlib1g-dev device-tree-compiler bc gzip unzip

End of the optional information

The downloaded software packages will be saved in /var/cache/apt/archives directory.

Optional section 1:
Create new folder and open terminal in this new folder.
Verify integrity of software packages for compiling offline
Download at first the Archive Signing Keys:
wget https://ftp-master.debian.org/keys/archive-key-10.asc
wget https://ftp-master.debian.org/keys/archive-key-10-security.asc

Compare the fingerprints of the keys with the fingerprints on https://ftp-master.debian.org/keys/:
gpg --import-options show-only --import archive-key-10.asc
gpg --import-options show-only --import archive-key-10-security.asc

Import the keys:
gpg --import archive-key-10.asc
gpg --import archive-key-10-security.asc

Check if the keys has been signed:
gpg --list-sig

Download the following files or create a textfile with text from the files on following sites:
wget http://ftp.debian.org/debian/dists/stable/InRelease
wget http://ftp.debian.org/debian/dists/stable/main/binary-arm64/Packages.gz
wget http://ftp.debian.org/debian/dists/stable/contrib/binary-arm64/Packages.gz
wget http://security-cdn.debian.org/debian-security/dists/stable/updates/InRelease
wget http://security-cdn.debian.org/debian-security/dists/stable/updates/main/binary-arm64/Packages.gz
wget http://security-cdn.debian.org/debian-security/dists/stable/updates/contrib/binary-arm64/Packages.gz

Check the file integrity from all InRelease files:
gpg --verify InRelease
gpg --verify InRelease.1

Compare the checksums of the Packages.gz files with the checksums in the InRelease file

Copy the software packages from /var/cache/apt/archives files in a new folder and open terminal in this folder and run in this folder the following command (this creates a list with sha256 checksums):
find . -type f -exec sha256sum {} \; > Packages256checksums.sha

Rename the files Packages.gz.1,  Packages.gz.2, Packages.gz.3 to Packages1.gz, Packages2.gz, Packages3.gz
Run the following commands to unpack the gz files and create output.txt with the sha256 checksums from the package files: 
gunzip Packages Packages1.gz Packages2.gz Packages3.gz; grep 'Package\|SHA256' 'Packages' > 'output.txt'; grep 'Package\|SHA256' 'Packages1' >> 'output.txt'; grep 'Package\|SHA256' 'Packages2' >> 'output.txt'; grep 'Package\|SHA256' 'Packages3' >> 'output.txt'

Edit output.txt (remove „SHA256: “):
sed 's/SHA256: //g' 'output.txt' > 'PackagesListReadyToCompare.txt'

Now copy the file Packages256checksums.sha from the packages folder in the current folder and run:
sed 's%\./.*%%' 'Packages256checksums.sha' > 'ChecksumsReadyToCompare.txt'

Create a list with all checksums that match:
grep -Fw -f 'PackagesListReadyToCompare.txt' 'ChecksumsReadyToCompare.txt' > 'ListWithChecksumsThatMatch.txt'

Control if all checksums match (number should match)
wc -l 'ListWithChecksumsThatMatch.txt'
wc -l 'ChecksumsReadyToCompare.txt'
End of the optional section 1

Copy the software packages to a emty USB stick or microSD card, then install the software packages on the operatingsystem which will never connected to the internet: Run in the software packages folder on the offline operatingsystem:
sudo dpkg -i *

Compile Kernel
Download needed files for kernel compiling:
Download latest stable kernel from https://www.kernel.org.
 
Optional: Download kernelpatch and sig file for your downloaded linux kernel version from https://github.com/anthraxx/linux-hardened/releases.

Check signature of the patch
Search on a pgp-keyserver for the pgp-key from anthraxx (Levente Polyak) and download the pgp-key from the pgp key server: http://pgp.zdv.uni-mainz.de:11371/pks/lookup?op=index&search=Levente+Polyak

Compare fingerprints:
gpg --import-options show-only --import pgpkey.asc

Import pgp-key:
gpg --import pgpkey.asc

Check patch signature:
sudo gpg –verify linux-hardened.patch.sig linux-hardened.patch
End of optional section

Check signature from kernel archiv file:
Open terminal where the downloaded linuxkernel folder are and run following command (replace: "linux.tar.xz" with the name of the downloaded linuxkernel file)
unxz -v linux.tar.xz

Look at the fingerprints on https://www.kernel.org/category/signatures.html, for example the fingerprint from the developer Greg Kroah-Hartman and search on a pgp-keyserver his pgp-key (the last eight digits from the fingerprint are displayed with the pgp-keys on the pgp-server): http://pgp.zdv.uni-mainz.de:11371/pks/lookup?op=index&search=Greg+Kroah-Hartman

Download the pgp-key then compare fingerprints:
gpg --import-options show-only --import pgpkey.asc

Then import the pgp-key:
gpg --import pgpkey.asc

Check kernel signature:
sudo gpg –verify linux.tar.sign linux.tar
End of section “Check signature from kernel archiv file“

Download our kernel configuration file avg_config or copy the text of the configuration file at the bottom of this website.

Copy now all downloaded files to the offline operatingsystem.

Compiling kernel
(see also:
https://wiki.alpinelinux.org/wiki/DIY_Fully_working_Alpine_Linux_for_Allwinner_and_Other_ARM_SOCs)

Unpack kernel archiv file and go into linux kernel folder.

Optional: Apply linux-hardened Patch
Copy patch in kernelfolder.
Open Terminal in Kernel folder and run:
patch -p1 < linux-hardened.patch
End of section “Apply linux-hardened Patch“

Open terminal in linux kernel folder and run:
make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- defconfig

Rename the downloaded kernel configuration file from avg7.de or your file with the kernel configuration text from the bottom of this website to .config and copy it into kernel folder (replace the existing .config)

Now edit kernel configuration, run:
make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- menuconfig

If you need a custom Kernel configuration notice that the following must be set:
CONFIG_SQUASHFS=m (Squashfs 4.0 is in File systems under Miscellaneous filesystems <M>SquashFS 4.0)

CONFIG_BLK_DEV_LOOP=m (Device drivers -> Block devices -> <M>Loopback device support)

CONFIG_MODULES ([*] Enable loadable module support)

CONFIG_FRAMEBUFFER_CONSOLE (Device Drivers --->Graphics support --->Console display driver support --->[*]Framebuffer Console support)

CONFIG_UEVENT_HELPER=y ( ---> Device Drivers ---> Generic Driver Options ---> [*]Support for uevent helper)

CONFIG_EXT4_FS=m ( ---> File systems ---> [*]<M> The Extended 4 (ext4) filesystem)

Now save configuration (your .config file in the linux folder is updated now)

Optional check your Kernel configuration with the Kconfig hardened check: https://github.com/a13xp0p0v/kconfig-hardened-check

Optional 2:
Download the list from https://libreplanet.org/wiki/LinuxLibre:Devices_that_require_non-free_firmware and save it as a textfile with the name unfreelist. Compare it with your kernel configuration:

Create list with you can easy compare:
sed 's/^/CONFIG_/' '/home/linux/Desktop/unfreelist' > '/home/linux/Desktop/unfreelistnew'

Compare:
grep -vw -F '/home/linux/Desktop/unfreelistnew' linuxkernel/.config
End of the optional section 2
 
If not all USB 2.0 ports work with ROC-RK3328-CC (RENEGADE) board change in the file "/arch/arm64/boot/dts/rockchip/rk3328.dtsi" in the section "usb20_otg: usb@ff580000" the line which contain "dr_mode = "otg";" to "dr_mode = "host";".
 
To use the USB 3.0 port follow the instructions from the following websites:
https://github.com/ayufan-rock64/linux-mainline-kernel/commit/84802c45a7cff42215869de40a2632db5f4a3be6
https://github.com/ayufan-rock64/linux-mainline-kernel/commit/4109a410cdcfbd0c716cb765c582261f2197a73b

Now compile kernel:
Go into the kernel folder and open terminal there. Then you have two options to compiling:
    • Cross-compile (if you not compile on a rock64 or ROC-RK3328-CC (RENEGADE) board):
      make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- deb-pkg
     
    • If you compile on your rock64 or ROC-RK3328-CC (RENEGADE) board you can use only the following command:
      make deb-pkg

If the compilation process finished there are files in the parent folder with the name linux and .deb file extension. Unpack the kernel image archiv file: First create new folder then copy the kernel archiv file which begins with the name linux-image in the new folder (not the file which include dbg in its filename)
cd newfolder
Run in  the newfolder
ar x linux-image.deb

Now go into the linux-image folder and unpack the data.tar.xz
tar xf data.tar.xz

Go in the folder boot, if the file wich filename begins with vmlinuz is a Archiv then add the file extension .gz to the file name and run:
gunzip vmlinuz-X.X.X.gz

Optional 3: Get needed firmware (with our kernel configuration file you usually don't need firmware)
First copy all modules from the unpacked kernel linux-image.deb into a new folder with the name emty_folder, to do that go into the folder which is in /lib/modules/ and run
find . -name \*.ko -exec cp {} 'emty_folder' \;

Go in emty_folder open terminal there and run: 
modinfo -F firmware * > needed_firmware.txt

Open the needed_firmware.txt, if this file is emty you don't need firmware. If the file is not emty create emty_folder2 and download firmware and signature file (sig) from https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/.

Go in download folder and run:
gunzip linux-firmware-.tar.gz

Search on a pgp-keyserver for the pgp-key from Josh Boyer and download the pgp-key from the pgp key server.

Compare fingerprints:
gpg --import-options show-only --import pgpkey.asc

Import pgp-key:
gpg --import pgpkey.asc

Check signature:
sudo gpg –verify linux-firmware-.tar.sig  linux-firmware-.tar

Then go in the downloaded firmwarefolder now we copy all needed firmware in emty_folder2 with the following command, run in the firmwarefolder:
tar cvf - -T needed_firmware.txt | tar xvf - -C emty_folder2
End of the optional section 3

Creating and modify needed Alpine Linux files:
Unpack Alpine Linux download file:
tar -xzf alpine.tar.gz

Go in the Alpine Linux folder and remove there the folders: efi and u-boot. If there is the folder extlinux, copy this folder into the folder boot. Go into the folder boot and remove there the folder grub.

Creating Initramfs File
Now move from the folder boot the file initramfs-vanilla in a new emty folder and run in this new folder:
gunzip -c initramfs-vanilla | cpio -i
rm initramfs-vanilla

Go now into /lib/modules/ and replace the folder which is in this folder with the folder which is in the /lib/modules/ folder from the unpacked kernel linux-image.deb.

If you need firmware replace the firmware files in the folder /lib/firmware with your firmware.

Go now back into the new folder and run (replace otherpath whith a path from a other folder):
find . | cpio -H newc -o | gzip -9 > /otherpath/initramfs-new

Go now into the other folder and run:
mkimage -n initramfs-new -A arm64 -O linux -T ramdisk -C none -d initramfs-new initramfs-ready
Now there in the other folder should be a file with the name initramfs-ready
Move the file initramfs-ready in the folder boot in the alpine folder.

Creating modloop File
Go now into the folder boot in the Alpine Linux folder and move from there the file which begins with the name modloop in a new emty folder.

Go into the new folder and run:
unsquashfs -f -d modloop modloop-file
Now delete the modloop-file.
Go into the folder modloop and there in the folder modules.
Replace the folder which is in this folder (not the folder with the name firmware) with the folder which is in the /lib/modules/ folder from the unpacked kernel linux-image.deb

If you need firmware replace the firmwarefiles in the folder /lib/firmware with your firmware.

Then go back into the new folder where the modloop folder are and run there:
mksquashfs modloop/ modloop-ready -comp xz -Xdict-size 100%

Now there in the other folder should be a file with the name modloop-ready.
Copy the file modloop-ready in the folder boot in the alpine folder.

Copy needed files:
Copy now the files in the boot folder from the unpacked kernel linux-image.deb into the folder boot in the Alpine Linux folder.

Create in the folder boot in the Alpine Linux folder a folder with the name dtbs and copy into this folder the file rk3328-rock64.dtb or rk3328-roc-cc.dtb which should be in the folder from the unpacked kernel linux-image.deb in a directory /usr/lib/ in a folder with the name rockchip.

Creating new extlinux.conf
Go into the folder boot in the Alpine Linux folder. Create a folder with the name extlinux if there is no folder with this name. Is in the folder extlinux a file with the name extlinux.conf open this file otherwise create a file with the name extlinux.conf. Delete all text in extlinux.conf if its not emty and insert the following text in the extlinux.conf file (replace XXX with your filenames of the files in the boot folder which is in the Alpine Linux folder):

LABEL Linux X.X.X
LINUX /boot/vmlinuz-X.X.X
INITRD /boot/initramfs-X.X.X
FDT /boot/dtbs/rk3328-rock64.dtb (or rk3328-roc-cc.dtb)
APPEND BOOT_IMAGE=/boot/vmlinuz-X.X.X modules=loop,squashfs,sd-mod,usb-storage modloop=/boot/modloop-X.X.X

Compiling U-boot
(If you need U-Boot for the ROC-RK3328-CC "Renegade" board, search in a Armbian image or in the files on avg7.de the needed U-Boot files)
Step 1: Get the file bl31.elf
You can build ATF with Upstream arm-trusted-firmware repository to get the file
"bl31.elf" (Way 1) or you use the rk322xh_bl31_vXXX.elf file from rockchip
rkbin repository (Way 2)

Way 1 (build ATF with Upstream arm-trusted-firmware repository to get
"bl31.elf")

Install the required packages (Debian / Ubuntu):
sudo apt-get install device-tree-compiler build-essential gcc make git libssl-dev

Go into your Download folder and open Terminal there, then run:
git clone https://github.com/ARM-software/arm-trusted-firmware
cd arm-trusted-firmware

Optional 4:
Verify code archive integrity (see also: https://restic.net/blog/2015-09-16/verifying-code-archive-integrity).
- Replace in the following Y.Y with the tag version number
Download pgp-key from the developer (you can find the gpg key ID on https://github.com/ARM-software/arm-trusted-firmware/tags) who has signed the tag, check fingerprints, import key and verify tag: Go into arm-trusted-firmware folder and run the following command and verify the fingerprint:
git tag --verify vY.Y

Now create a archive that contain the same repository as the release with the tag version, run in arm-trusted-firmware folder the following command:
git archive --format=tar --prefix=arm-trusted-firmware-Y.Y/ vY.Y | gzip -n > arm-trusted-firmware-Y.Y.tar.gz

Show the sha256 checksum from the archive that contain the repository from the release with the tag version and show sha256 checksum from the same archive https://github.com/ARM-software/arm-trusted-firmware/archiv/vY.Y.tar.gz which belongs to the tag and compare the checksums:
sha256sum arm-trusted-firmware-Y.Y.tar.gz

curl -s -L https://github.com/ARM-software/arm-trusted-firmware/archiv/vY.Y.tar.gz | sha256sum

End of the optional section 4

Open the file „platform_def.h“ (its in plat/rockchip/rk3328/include
/platform_def.h)
Change in this file the Line:
#define BL31_BASE (TZRAM_BASE + 0x40000)
to
#define BL31_BASE (TZRAM_BASE + 0x10000)
cd arm-trusted-firmware
make CROSS_COMPILE=aarch64-linux-gnu- PLAT=rk3328 DEBUG=1 bl31

Go into your Download folder and open Terminal, then run:
git clone git://git.denx.de/u-boot.git
or Download U-Boot source tree from https://ftp.denx.de/pub/u-boot/
(How to verify downloaded file with .sig file: https://stackoverflow.com/questions
/15331015/how-to-verify-downloaded-file-with-sig-file)

Search now the "bl31.elf" file in the arm-trusted-firmware build folder and copy it
in the U-Boot folder.

Way 2 (use "bl31.elf" file from rockchip rkbin repository)
Go into your Download folder and open Terminal, then run:
git clone git://git.denx.de/u-boot.git
or Download U-Boot source tree from ftp://ftp.denx.de/pub/u-boot/
(How to verify downloaded file with .sig file: https://stackoverflow.com/questions
/15331015/how-to-verify-downloaded-file-with-sig-file)

Go back into your Download folder and open Terminal, then run:
git clone https://github.com/rockchip-linux/rkbin
cd rkbin

Search the file „rk322xh_bl31_v1.42.elf“ in the rkbin folder (current version is
v1.42, this file is in bin/rk33/) and change the name of this file to „bl31.elf“ and
copy it in the U-Boot folder.

Step 2: Compile U-Boot
Install the required packages (for latest Debian):
sudo apt-get install bison dh-python flex gcc libexpat1-dev libmpdec2 libpython-dev libpython-stdlib libpython2-dev libpython2-stdlib libpython2.7-dev libpython2.7-minimal libpython2.7-stdlib libpython2.7 libpython3-dev libpython3-stdlib libpython3.7-dev libpython3.7-minimal libpython3.7-stdlib libpython3.7 make mime-support python-dev python-minimal python-pip-whl python-pip python2-dev python2-minimal python2.7-dev python2.7-minimal python2.7 python2 python3-dev python3-distutils python3-lib2to3 python3-minimal python3-pip python3-pkg-resources python3-setuptools python3.7-dev python3.7-minimal python3.7 python3 python swig u-boot-tools cpp
 
cd u-boot
make CROSS_COMPILE=aarch64-linux-gnu- BL31=bl31.elf rock64-rk3328_defconfig

make CROSS_COMPILE=aarch64-linux-gnu- BL31=bl31.elf all u-boot.itb
 
Flash U-Boot to microSD card
Create a ext4 partition with e.g. gparted or fdisk which begins at 16 mb.

Create partition with fdisk:
(replace sda1 with the name of your microSD card  with number (you can find it with fdisk -l))
sudo umount /dev/sda1

(replace sda with the name of your microSD card but now in the following without number (you can find it with fdisk -l))
sudo fdisk /dev/sda
d
w
sudo fdisk /dev/sda
o
w
sudo fdisk /dev/sda
n
Enter
Enter
First sector (2048-62333951, default 2048): 32768
Enter
w
sudo mkfs.ext4 /dev/sda1 (with number!)

sudo fdisk /dev/sda
p (at Boot must be a "*"  if there is not a "*" then press "a" and then "w")
w
End of fdisk instructions.
 
Now run this command: sudo umount /dev/sda1 (replace sda1 with the name of your microSD (with number at the end))

Open Terminal in the U-Boot folder and flash U-Boot to microSD card with
following commands (you can find the name of your microSD card with e.g.
gparted, we search for example /dev/sda (without number! not /dev/sda1)):
sudo dd if=./idbloader.img of=/dev/sda seek=64
sudo dd if=./u-boot.itb of=/dev/sda seek=16384

For the ROC-RK3328-CC RENEGADE board:
sudo dd if=idbloader.bin of=/dev/sdc seek=64 conv=notrunc
sudo dd if=uboot.img of=/dev/sdc seek=16384 conv=notrunc
sudo dd if=trust.bin of=/dev/sdc seek=24576 conv=notrunc

Now copy the files on the microSD card.

Setting up Alpine Linux and install and configure Sway + basic hardening and setup  
1: Download programs
setup-alpine
Edit /etc/apk/repositorys (uncommment community lines)
apk update
Download programs for Logcheck: apk add logcheck grep bash logtail perl run-parts

For Sway etc.:
apk add audit eudev libinput sway sway-doc xorg-server-xwayland swaylock swayidle ttf-freefont mesa mesa-dri-gallium mesa-egl mesa-gbm mesa-gl mesa-glapi mesa-gles mc sudo macchanger firefox-esr libc6-compat gnupg iptables alacritty
Edit /etc/apk/repositorys (uncommment edge lines)
apk add bemenu

For server:
apk add macchanger iptables audit sudo

Optional information and recommendations:
Sway: eudev sway libinput sway-doc xorg-server-xwayland swaylock swayidle ttf-freefont mesa mesa-dri-gallium mesa-egl mesa-gbm mesa-gl mesa-glapi mesa-gles bemenu
Terminal emulator for Wayland: alacritty
Browser: lynx firefox-esr
Monitoring: logcheck audit bemenu arpon
Email: mutt thunderbird (For Thunderbird: libstdc++ pango glib gtk+3.0)
Password manager: keepassxc pass
Tor: tor torsocks
For Flash-Player in Firefox: libc6-compat
Filemanager: mc spacefm nnn
To use an exFAT Drive on Linux: exfat-utils
XMPP: profanity dino gajim
PGP: gnupg
End of optional information and recommendations

2: Use new microSD card: Flash U-Boot and copy files to new emty microSD card, then start alpine linux with new microSD card.

3: Edit sysctl.conf
Insert the following in the file "/etc/sysctl.conf":
dev.tty.ldisc_autoload = 0
fs.protected_fifos = 2
fs.protected_hardlinks = 1
fs.protected_regular = 2
fs.protected_symlinks = 1
fs.suid_dumpable = 0
# kernel.deny_new_usb = 0
kernel.device_sidechannel_restrict = 1
kernel.dmesg_restrict = 1
# kernel.exec-shield = 1
# kernel.kexec_load_disabled = 1
kernel.kptr_restrict = 2
# If you uncomment the line "kernel.modules_disabled = 1" then you need insert in the file "/etc/modules" all names from the modules that you need.
# kernel.modules_disabled = 1
# kernel.perf_event_paranoid = 3
kernel.pid_max = 32768
kernel.randomize_va_space = 2
# kernel.sysrq = 0
kernel.tiocsti_restrict = 1
kernel.unprivileged_bpf_disabled = 1
# kernel.unprivileged_userns_clone = 0
kernel.yama.ptrace_scope = 3
net.core.bpf_jit_harden = 2
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.all.log_martians = 1
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.all.secure_redirects = 1
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.all.shared_media = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv4.conf.default.log_martians = 1          
net.ipv4.conf.default.rp_filter = 1
net.ipv4.conf.default.secure_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.default.shared_media = 0
net.ipv4.icmp_echo_ignore_all = 1
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.ipv4.ip_forward = 0
net.ipv4.tcp_rfc1337 = 1
net.ipv4.tcp_challenge_ack_limit = 1000000
net.ipv4.tcp_invalid_ratelimit = 500
net.ipv4.tcp_max_syn_backlog = 20480
net.ipv4.tcp_sack = 0
net.ipv4.tcp_syn_retries = 5
net.ipv4.tcp_synack_retries = 2      
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_timestamps = 0
net.ipv4.tcp_window_scaling = 0
# net.netfilter.nf_conntrack_max = 2000000
# net.netfilter.nf_conntrack_tcp_loose = 0

4: sh usersetup.sh
setup-alpine
adduser admin
chmod -R 0700 /home/admin
mkdir /etc/home
adduser inet
chmod -R 0700 /home/inet

5: Add DNS server with DNSSEC and DNS over TLS (networkedit.sh)
echo "nameserver 46.182.19.48" > /etc/resolv.conf
echo "nameserver 89.233.43.71" >> /etc/resolv.conf

6: Edit "/etc/profile" and change the line "umask 022" to "umask 077"

7: Install sudo
apk verify sudo.apk
apk add sudo

8: Edit "/etc/sudoers" (sudoersedit.sh)
Insert this lines:
Defaults secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
Defaults passwd_tries=1
Defaults use_pty
Defaults requiretty
Defaults env_reset, timestamp_timeout=0
admin ALL=(ALL) ALL

9: Deactivate root account (rmroot.sh)
sed -i "1s/:::::/::::1:/g" /etc/shadow
sed -i "s/^/#/" /etc/securetty
passwd -l root
exit

10: Login with admin and install programs
sudo apk verify "/path_to_folder_with_downloaded_programs/*.apk"
sudo apk add "/path_to_folder_with_downloaded_programs/*.apk"

11: Setup Firewall
Create a file with the name "firewall.sh" with the following text:
#!/bin/sh
# iptables Firewall Skript

# Iptables einrichten
/sbin/rc-update add iptables
modprobe ip_tables

##################
# iptables 
##################

IPTABLES="/sbin/iptables"

##################
# Purge/Flush 
##################

# Alle Regeln löschen
$IPTABLES -F 
$IPTABLES -t nat -F
$IPTABLES -t mangle -F

# Alle Regelketten löschen
$IPTABLES -X 
$IPTABLES -t nat -X
$IPTABLES -t mangle -X

##################
# Regeln
##################

# IPv4 Default
$IPTABLES -P INPUT DROP
$IPTABLES -P FORWARD DROP
$IPTABLES -P OUTPUT DROP

# Loopback-Schnittstelle Verkehr erlauben
$IPTABLES -A INPUT -i lo -j ACCEPT 
$IPTABLES -A OUTPUT -o lo -j ACCEPT

# ICMP-Antwortpakete erlauben
$IPTABLES -A INPUT -p icmp -m icmp --icmp-type echo-reply -j ACCEPT 
$IPTABLES -A INPUT -p icmp -m icmp --icmp-type echo-request -j ACCEPT 
$IPTABLES -A INPUT -p icmp -m icmp --icmp-type destination-unreachable -j ACCEPT

# Alle Pakete zu einer bestehenden TCP-Verbindung akzeptieren
$IPTABLES -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
$IPTABLES -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

# Alle Pakete ordentlich zurückweisen
$IPTABLES -A INPUT -p tcp -j REJECT --reject-with tcp-reset 
$IPTABLES -A INPUT -j REJECT --reject-with icmp-port-unreachable

# DNS erlauben
$IPTABLES -A OUTPUT -o eth0 -p tcp -m tcp  --dport 53  -m state --state NEW  -j ACCEPT
$IPTABLES -A OUTPUT -o wlan0 -p tcp -m tcp  --dport 53  -m state --state NEW  -j ACCEPT
$IPTABLES -A OUTPUT -o eth0 -p udp -m udp  --dport 53  -m state --state NEW  -j ACCEPT
$IPTABLES -A OUTPUT -o wlan0 -p udp -m udp  --dport 53  -m state --state NEW  -j ACCEPT

# HTTP erlauben
$IPTABLES -A OUTPUT -o eth0 -p tcp -m tcp  --dport 80  -m state --state NEW  -j ACCEPT
$IPTABLES -A OUTPUT -o wlan0 -p tcp -m tcp  --dport 80  -m state --state NEW  -j ACCEPT

# HTTPS erlauben
$IPTABLES -A OUTPUT -o eth0 -p tcp -m tcp  --dport 443  -m state --state NEW  -j ACCEPT
$IPTABLES -A OUTPUT -o wlan0 -p tcp -m tcp  --dport 443  -m state --state NEW  -j ACCEPT

# POP3s erlauben
# $IPTABLES -A OUTPUT -o eth0 -p tcp -m tcp  --dport 995  -m state --state NEW  -j ACCEPT
# $IPTABLES -A OUTPUT -o wlan0 -p tcp -m tcp  --dport 995  -m state --state NEW  -j ACCEPT

# POP3 erlauben
# $IPTABLES -A OUTPUT -o eth0 -p tcp -m tcp  --dport 110  -m state --state NEW  -j ACCEPT
# $IPTABLES -A OUTPUT -o wlan0 -p tcp -m tcp  --dport 110  -m state --state NEW  -j ACCEPT

# IMAP erlauben
# $IPTABLES -A OUTPUT -o eth0 -p tcp -m tcp  --dport 143  -m state --state NEW  -j ACCEPT
# $IPTABLES -A OUTPUT -o wlan0 -p tcp -m tcp  --dport 143  -m state --state NEW  -j ACCEPT

# Logging aktivieren
$IPTABLES -N LOGGING
$IPTABLES -A INPUT -j LOGGING
$IPTABLES -A OUTPUT -j LOGGING
$IPTABLES -A LOGGING -m limit --limit 2/min -j LOG --log-prefix "IPTables-Dropped: " --log-level 4
$IPTABLES -A LOGGING -j DROP

# Regeln speichern und iptables einrichten
/sbin/iptables-save > /etc/iptables/rules-save

Then run sudo sh firewall.sh

12: Setup sway
sudo setup-udev
sudo addgroup admin input
sudo addgroup admin video
sudo addgroup inet input
sudo addgroup inet video
Create now a file "/etc/profile.d/xdg_runtime_dir.sh" and insert the XDG_RUNTIME_DIR variable (see https://wiki.alpinelinux.org/Wayland) and run "sudo chmod 755 /etc/profile.d/xdg_runtime_dir.sh"
For german keyboard layout insert in "/etc/sway/config" the line "input * xkb_layout "de""
Change in "/etc/sway/config" the line which begins with "set $term" to "set $term "env LIBGL_ALWAYS_SOFTWARE=1 /usr/bin/alacritty""
Change in "/etc/sway/config" the line "set $menu dmenu_path | dmenu | xargs swaymsg exec --" to "set $menu /usr/bin/bemenu-run | /usr/bin/xargs /usr/bin/swaymsg exec"
Disable xwayland for firefox: Insert in the file "/etc/profile" the line "export MOZ_ENABLE_WAYLAND=1"
If you want disable xwayland for all programs, insert the line "xwayland disable" into "/etc/sway/config". 

13: Edit "/etc/fstab"
Insert the following lines into the file "/etc/fstab":
tmpfs /home tmpfs nosuid,nodev,noexec,mode=0755 0 0
tmpfs /tmp tmpfs  nosuid,nodev,noexec 0 0
tmpfs /var/tmp tmpfs nosuid,nodev,noexec 0 0

14: Create scripts 
Create a file with the name "startscript.sh" with this text (you should use "/media/mmcblk1p1" for the ROC-RK3328-CC "RENEGADE" board and for the ROCK64 board "/media/mmcblk0p1"):
#!/bin/sh 
/bin/echo ""; 
/bin/echo "CHECKSUMS:"; 
/usr/bin/openssl dgst -blake2b512 /media/mmcblk1p1/localhost.apkovl.tar.gz; 
/usr/bin/openssl dgst -sha3-512 /media/mmcblk1p1/localhost.apkovl.tar.gz; 
/bin/echo ""; 
/bin/echo "SHA-512 checksum:"; 
/usr/bin/sha512sum /media/mmcblk1p1/localhost.apkovl.tar.gz; 
/bin/echo ""; 
/usr/bin/sha512sum -c /etc/files/512checksums.sha | /bin/grep -e FAILED -e WARNING; 
/usr/bin/sha256sum -c /etc/files/256checksums.sha | /bin/grep -e FAILED -e WARNING; 
/sbin/apk verify /media/mmcblk1p1/cache/*.apk | /bin/grep UNTRUSTED; 
/sbin/apk verify /media/mmcblk1p1/apks/aarch64/*.apk | /bin/grep UNTRUSTED; 
/bin/echo ""; 
/sbin/ifconfig eth0 down; 
/usr/bin/macchanger -r eth0; 
/sbin/ifconfig eth0 up; 
/sbin/ifconfig wlan0 down; 
/usr/bin/macchanger -r wlan0; 
/sbin/ifconfig wlan0 up; 
/bin/echo ""; 
/bin/echo "Number of all files and folders on /media/mmcblk1p1:"; 
/usr/bin/find /media/mmcblk1p1/* | /usr/bin/wc -l;
/bin/echo ""; 
/bin/echo "Number of all files and folders in the following folders:"; 
/bin/echo "/media/mmcblk1p1/apks:"; 
/usr/bin/find /media/mmcblk1p1/apks | /usr/bin/wc -l; 
/bin/echo "/media/mmcblk1p1/boot:"; 
/usr/bin/find /media/mmcblk1p1/boot | /usr/bin/wc -l; 
/bin/echo "/media/mmcblk1p1/cache:"; 
/usr/bin/find /media/mmcblk1p1/cache | /usr/bin/wc -l; 
/bin/echo "/media/mmcblk1p1/SHARE:"; 
/usr/bin/find /media/mmcblk1p1/SHARE | /usr/bin/wc -l; 
/bin/cp -rp /etc/home/* /home/; 
/bin/rm -r /etc/home; 
/bin/mkdir /etc/home; 
/bin/chmod 600 /etc/home; 
/bin/chmod 400 /etc/motd; 
/bin/chown admin:admin /etc/motd; 
/bin/chown root:logcheck /var/log/messages; 
/bin/chmod 0700 /var/log/wtmp; 
/bin/chmod -s /bin/su; 
/bin/chmod -s /usr/bin/expiry; 
/bin/chmod -s /usr/bin/newgrp; 
/bin/chmod -s /usr/bin/gpasswd; 
/bin/chmod -s /usr/bin/chfn; 
/bin/chmod -s /usr/bin/chage; 
/bin/chmod -s /usr/bin/chsh; 
/bin/chmod 660 /dev/net/tun;
/bin/mkdir /var/log/audit; 
/bin/touch /var/log/audit/audit.log; 
/bin/chmod 640 /var/log/audit/audit.log; 
/bin/chmod 750 /var/log/audit; 
/bin/chown root:root /var/log/audit/audit.log; 
/bin/chown root:root /var/log/audit; 
/bin/mv /usr/bin/auvirt /usr/bin/ausyscall /usr/bin/aulastlog /usr/bin/aulast /sbin; 
/bin/mv /usr/sbin/autrace /usr/sbin/ausearch /usr/sbin/aureport /usr/sbin/augenrules /usr/sbin/auditd /usr/sbin/auditctl /usr/sbin/audisp-remote /usr/sbin/audispd /sbin;
/bin/echo ""; 
/sbin/rc-service auditd start;

Then run: 
sudo mkdir "/etc/files".

Then copy "startscript.sh" into the folder "/etc/files".
Run: sudo chmod 500 /etc/files/startscript.sh

To start the "startscript.sh" automatically at boot:
Create a file with the name "boot.start" with this text:
#!/bin/sh
/bin/chmod 600 /etc/motd; /bin/chown root:root /etc/motd; /bin/sh /etc/files/startscript.sh > /etc/motd

Then copy "boot.start" into the folder "/etc/local.d".
Run:
sudo chmod 500 /etc/local.d/boot.start
sudo rc-update add local default 

Create a file with the name "log.sh" with the folowing text:

#!/bin/sh
while :
do
clear && clear
/usr/bin/sudo -u logcheck /usr/sbin/logcheck -o -t | /bin/grep -v "COMMAND=/usr/sbin/logcheck -o -t\|COMMAND=/bin/cat /var/log/audit/audit.log\|COMMAND=/sbin/aureport\|COMMAND=/bin/rc-status -a\|COMMAND=/sbin/auditctl -s"
sleep 33
clear && clear
/bin/echo "AUDIT LOG"
/usr/bin/sudo /bin/cat /var/log/audit/audit.log
/bin/echo ""
/usr/bin/sudo /sbin/aureport
sleep 33
clear && clear
/bin/echo "SERVICES AND RUNLEVELS"
/usr/bin/sudo /bin/rc-status -a
/bin/echo ""
/bin/echo "AUDIT STATUS"
/usr/bin/sudo /sbin/auditctl -s
sleep 15
clear && clear
/bin/ps -o pid,user,group,rss,stat,ppid,pgid,ruser,rgroup,etime,args
sleep 25
file=/var/log/messages
msize=3000000
size="$(/usr/bin/wc -c <"$file")"
if [ "$size" -ge "$msize" ]; then
/bin/sed -i -e "/COMMAND=\/usr\/sbin\/logcheck -o -t/d" -e "/COMMAND=\/bin\/cat \/var\/log\/audit\/audit.log/d" -e "/COMMAND=\/sbin\/aureport/d" -e "/COMMAND=\/bin\/rc-status -a/d" -e "/COMMAND=\/sbin\/auditctl -s/d" /var/log/messages 
else
/bin/echo ""
fi
done

Then copy "log.sh" into the folder "/etc/files".
Run: sudo chmod 500 "/etc/files/log.sh"

15: Remove unwanted systemusers
sudo deluser sync
sudo deluser shutdown
sudo deluser halt

16: System adjustments
sudo chmod 0400 /etc/shadow
sudo chmod 0700 -R /etc/init.d
sudo chmod 0700 /etc/sysctl.conf
sudo chmod 0700 /etc/inittab
Insert in the file "/etc/logcheck/logcheck.logfiles" the line "/var/log/messages".

17: Setup Audit
The following lines should be in "/etc/audit/auditd.conf":

# Ensure audit log storage size is configured
max_log_file = 500

# Ensure audit logs are not automatically deleted
max_log_file_action = KEEP_LOGS

# Sending message to syslog if the system has detected that it starting to run low on disk space.
space_left = 300
space_left_action = SYSLOG

# Stop the audit daemon to writing records on disk if the system has detected that it is low on disk space
admin_space_left = 100
admin_space_left_action = SUSPEND

# Sending message to syslog if an error is detected while writing audit events to disk
disk_error_action = SYSLOG

Then change the line "USE_AUGENRULES="no"" in the file "/etc/sysconfig/auditd" to "USE_AUGENRULES="yes"".
sudo mkdir /etc/audit/rules.d
sudo chown root:root /etc/audit/rules.d
sudo chmod 750 /etc/audit/rules.d
Create the file "/etc/audit/rules.d/audit.rule" and insert the following lines:
# Remove any existing rules
-D

## Suspicious activity
-w /usr/bin/wget -p x -k susp_activity
-w /usr/bin/curl -p x -k susp_activity
-w /usr/bin/base64 -p x -k susp_activity
-w /bin/nc -p x -k susp_activity
-w /bin/netcat -p x -k susp_activity
-w /usr/bin/ncat -p x -k susp_activity
-w /usr/bin/ssh -p x -k susp_activity
-w /usr/bin/socat -p x -k susp_activity
-w /usr/bin/wireshark -p x -k susp_activity
-w /usr/bin/rawshark -p x -k susp_activity
-w /usr/bin/rdesktop -p x -k sbin_susp

## Sbin suspicious activity
-w /sbin/iptables -p x -k sbin_susp 
-w /sbin/ifconfig -p x -k sbin_susp
-w /usr/sbin/tcpdump -p x -k sbin_susp
-w /usr/sbin/traceroute -p x -k sbin_susp

## Injection 
### These rules watch for code injection by the ptrace facility.
### This could indicate someone trying to do something bad or just debugging
# -a always,exit -F arch=aarch64 -S ptrace -k tracing
# -a always,exit -F arch=aarch64 -S ptrace -F a0=0x4 -k code_injection
# -a always,exit -F arch=aarch64 -S ptrace -F a0=0x5 -k data_injection
# -a always,exit -F arch=aarch64 -S ptrace -F a0=0x6 -k register_injection

# successful and unsuccessful attempts to read information from the audit records
-w /var/log/audit/ -k LOG_audit

# modifications to audit configuration that occur while the audit collection functions are operating
-w /etc/audit/ -p wa -k CFG_audit
-w /etc/sysconfig/auditd  -p wa -k CFG_auditd.conf
-w /etc/libaudit.conf -p wa -k CFG_libaudit.conf
-w /etc/audisp/ -p wa -k CFG_audisp

# Networking
-w /etc/netlabel.rules -p wa -k CFG_netlabel.rules
-w /etc/ipsec.conf -p wa -k CFG_ipsec.conf
-w /etc/ipsec.d/ -p wa -k CFG_ipsec.conf
-w /etc/ipsec.secrets -p wa -k CFG_ipsec.secrets

# Ensure events that modify the system's network environment are collected
# -a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale
-w /etc/issue -p wa -k system-locale
-w /etc/issue.net -p wa -k system-locale
-w /etc/hosts -p wa -k system-locale
-w /etc/sysconfig/network -p wa -k system-locale

# Ensure successful file system mounts are collected
# -a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts

# Ensure changes to system administration scope (sudoers) is collected
-w /etc/sudoers -p wa -k scope
-w /etc/sudoers.d -p wa -k scope

# Watch syslog configuration
-w /etc/syslog.conf

# Watch PAM and authentication configuration
#-w /etc/pam.d/
#-w /etc/nsswitch.conf

# Watch system log files
-w /var/log/messages
-w /var/log/audit/audit.log
-w /var/log/audit/audit[1-4].log

# Watch audit configuration files
-w /etc/audit/auditd.conf -p wa
-w /etc/audit/audit.rules -p wa

# Watch login configuration
-w /etc/login.defs
-w /etc/securetty
-w /etc/resolv.conf

# Watch cron and at
-w /etc/at.allow
-w /etc/at.deny
-w /var/spool/at/
-w /etc/crontab
-w /etc/anacrontab
-w /etc/cron.allow
-w /etc/cron.deny
-w /etc/cron.d/
-w /etc/cron.hourly/
-w /etc/cron.weekly/
-w /etc/cron.monthly/

# Watch shell configuration
-w /etc/profile.d/
-w /etc/profile
-w /etc/shells
-w /etc/bashrc
-w /etc/csh.cshrc
-w /etc/csh.login

# Watch kernel configuration
-w /etc/sysctl.conf
-w /etc/modprobe.conf

# Watch linked libraries
-w /etc/ld.so.conf -p wa
-w /etc/ld.so.conf.d/ -p wa

# Watch init configuration
-w /etc/rc.d/init.d/
-w /etc/sysconfig/
-w /etc/inittab -p wa
-w /etc/rc.local
-w /etc/rc.sysinit

# Watch filesystem and NFS exports
-w /etc/fstab
-w /etc/exports

# Watch xinetd configuration
-w /etc/xinetd.conf
-w /etc/xinetd.d/

# Watch TCP_WRAPPERS configuration
-w /etc/hosts.allow
-w /etc/hosts.deny

# Watch sshd configuration
# -w /etc/ssh/sshd_config

# Audit system events
# -a always,exit -F arch=b32 -S acct -S reboot -S sched_setparam -S sched_setscheduler -S setrlimit -S swapon 

# Audit any link creation
# -a always,exit -F arch=aarch64 -S link -S symlink
# -a always,exit -F arch=aarch64 -S link -S symlink

# # Audit suid and sgid executables   
-a always,exit -F path=/sbin/unix_chkpwd -F perm=x -F auid>=1000 -F auid!=4294967295 -k privileged
-a always,exit -F path=/bin/bbsuid -F perm=x -F auid>=1000 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/sway -F perm=x -F auid>=1000 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/sudo -F perm=x -F auid>=1000 -F auid!=4294967295 -k privileged

##############################
## NIST 800-53 Requirements ##
##############################

#2.6.2.4.1 Records Events that Modify Date and Time Information
# -a always,exit -F arch=aarch64 -S adjtimex -S settimeofday -S stime -k time-change
# -a always,exit -F arch=aarch64 -S adjtimex -S stime -S settimeofday -k time-change
# -a always,exit -F arch=aarch64 -S clock_settime -k time-change
# -a always,exit -F arch=aarch64 -S adjtimex -S settimeofday -k time-change
-w /etc/localtime -p wa -k time-change

#2.6.2.4.2 Record Events that Modify User/Group Information
-w /etc/group -p wa -k identity
-w /etc/passwd -p wa -k identity
-w /etc/gshadow -p wa -k identity
-w /etc/shadow -p wa -k identity
-w /etc/security/opasswd -p wa -k identity
-w /etc/sudoers

#2.6.2.4.3 Record Events that Modify the Systems Network Environment
# -a always,exit -F arch=b32 -S sethostname -S setdomainname -k audit_network_modifications
-w /etc/issue -p wa -k audit_network_modifications
-w /etc/issue.net -p wa -k audit_network_modifications
-w /etc/hosts -p wa -k audit_network_modifications
-w /etc/sysconfig/network -p wa -k audit_network_modifications

#2.6.2.4.4 Record Events that Modify the System Mandatory Access Controls
-w /etc/selinux/ -p wa -k MAC-policy

#2.6.2.4.5 Ensure auditd Collects Logon and Logout Events
-w /var/log/faillog -p wa -k logins
-w /var/log/lastlog -p wa -k logins

#2.6.2.4.6 Ensure auditd Collects Process and Session Initiation Information
-w /var/run/utmp -p wa -k session
-w /var/log/btmp -p wa -k session
-w /var/log/wtmp -p wa -k session

#2.6.2.4.7 Ensure auditd Collects Discretionary Access Control Permission Modification Events
# -a always,exit -F arch=aarch64 -S chmod -S fchmod -S fchmodat -F auid>=500 -F auid!=4294967295 -k perm_mod
# -a always,exit -F arch=aarch64 -S chown -S fchown -S fchownat -S lchown -F auid>=500 -F auid!=4294967295 -k perm_mod
# -a always,exit -F arch=aarch64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=500 -F auid!=4294967295 -k perm_mod

#2.6.2.4.8 Ensure auditd Collects Unauthorized Access Attempts to Files (unsuccessful)
# -a always,exit -F arch=aarch64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=500 -F auid!=4294967295 -k access
# -a always,exit -F arch=aarch64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=500 -F auid!=4294967295 -k access

#2.6.2.4.9 Ensure auditd Collects Information on the Use of Privileged Commands
-a always,exit -F path=/bin/ping -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/bin/umount -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/bin/mount -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/bin/su -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/bin/chgrp -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/bin/ping6 -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/sbin/pam_timestamp_check -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/sbin/unix_chkpwd -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/sbin/pwck -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/sbin/suexec -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/sbin/useradd -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/sbin/userdel -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/sbin/usermod -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/sbin/newusers -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/sbin/groupadd -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/sbin/groupdel -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/sbin/groupmod -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/sbin/semanage -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/sbin/usernetctl -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/sbin/ccreds_validate -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/sbin/userhelper -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
# -a always,exit -F path=/usr/libexec/openssh/ssh-keysign -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/Xorg -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/rlogin -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/sudoedit -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/at -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/rsh -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/gpasswd -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/kgrantpty -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/crontab -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/sudo -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/staprun -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/rcp -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/passwd -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/chsh -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/chfn -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/chage -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/setfacl -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/chacl -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/chcon -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/newgrp -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/newrole -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/kpac_dhcp_helper -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged

#2.6.2.4.10 Ensure auditd Collects Information on Exporting to Media (successful)
# -a always,exit -F arch=b32 -S mount -F auid>=500 -F auid!=4294967295 -k export

#2.6.2.4.11 Ensure auditd Collects Files Deletion Events by User (successful and unsuccessful)
# -a always,exit -F arch=aarch64 -S unlink -S rmdir -S unlinkat -S rename -S renameat -F auid>=500 -F auid!=4294967295 -k delete
# -a always,exit -F arch=aarch64 -S rmdir -S unlink -S unlinkat -S rename -S renameat -F auid=0 -k delete 

# Ensure file deletion events by users are collected
# -a always,exit -F arch=aarch64 -S unlink -S unlinkat -S rename -S renameat -F auid>=500 -F auid!=4294967295 -k delete

#2.6.2.4.12 Ensure auditd Collects System Administrator Actions
-w /etc/sudoers -p wa -k actions
-w /var/log/sudo.log -p wa -k actions

#2.6.2.4.13 Ensure kernel module loading and unloading is collected
-w /sbin/insmod -p x -k modules
-w /sbin/rmmod -p x -k modules
-w /sbin/modprobe -p x -k modules
# -a always,exit -F arch=aarch64 -S init_module -S delete_module -k modules

#2.6.2.4.14 Make the auditd Configuration Immutable
-e 2

Now run: sudo chmod 500 /etc/audit/rules.d/audit.rule

18: Create files with checksums
find . -type f -exec sha256sum {} \; > 256checksums.sha
find . -type f -exec sha512sum {} \; > 512checksums.sha

19: Save changes
If you want to save all files in the user folders, run:
sudo cp -rp /home/* /etc/home/
sudo lbu commit
Every time if you start the system, you must run (with startscript.sh):
sudo cp -rp /etc/home/* /home/
sudo rm -r /etc/home/*
sudo lbu commit
